#!/bin/bash

# define the debug routine
_DEBUG=false
DEBUG ()
{
	  $_DEBUG && $@ || :
}

DRYRUN=false
INSTALL=false
UNINSTALL=false
PRODUCT=""

usage()
{
	echo "Usage: install [--install] [--uninstall] [--product <informix|jsonListener>] [--debug] [--dryrun]"
}

while [ "$1" != "" ]; do
	case $1 in
	--debug ) _DEBUG=true
		;;
	--dryrun ) DRYRUN=true
		;;
	--install ) INSTALL=true
		;;
	--uninstall ) UNINSTALL=true
		;;
	--product ) shift
		PRODUCT=$1
		;;
	* ) usage;
		exit 1;
	esac
	shift
done

if [ -z "$PRODUCT" ]; then
	echo -n "Enter the name of the product to install: "
	read response
	if [ -n "$response" ]; then
		PRODUCT="$response"
	else
		echo "No product specified. Exiting"
		exit 0
	fi
fi

if $_DEBUG; then echo "debug mode enabled"; fi
if $DRYRUN; then echo "dry run enabled"; fi

if [ -f "/etc/rc.d/init.d/functions" ]; then
	DEBUG echo "Detected RHEL"
	PLATFORM="RHEL"
elif [ -f /etc/rc.status ] ; then
	DEBUG echo "Detected SLES"
	PLATFORM="SLES"
else
	echo "Detected unsupported platform"
	exit 1
fi

# determine the path to the script in a POSIX-compliant manner
SCRIPT_PATH=`dirname "$0"`
SCRIPT_PATH=`eval "cd \"$SCRIPT_PATH\" && pwd"`
DEBUG echo "SCRIPT_PATH=$SCRIPT_PATH"

INFORMIX_INIT="${SCRIPT_PATH}/informix.suse"
INFORMIX_SYSCONFIG="${SCRIPT_PATH}/informix.sysconfig"
LISTENER_INIT="${SCRIPT_PATH}/jsonListener.init"
LISTENER_SYSCONFIG="${SCRIPT_PATH}/jsonListener.sysconfig"
INIT_DIR="/etc/init.d"
SBIN_DIR="/sbin"
SYSCONFIG_DIR="/etc/sysconfig"

# Determine the OS
# For UnitedLinux/SuSE/Novell Linux
# For RHEL/CentOS
# For other Linux, print an error and exit.

LSB_RELEASE_BIN=`which lsb_release 2>/dev/null`
if [ $? -eq 0 ]; then
	DEBUG echo "Found lsb_release"
else
	echo "Unable to find lsb_release"
	exit 1
fi

# Return Codes
#  0 - the argument is a directory and is writable
#  1 - the argument does not exist
#  2 - the argument exists, but is not a directory
#  3 - the argument exists, is a directory, but is not writable
canWriteToDir()
{
	if [ -d "$1" ]; then
		if [ -w "${1}" ]; then
			return 0
		else
			echo "Unable to write to ${1} (No write permission)"
			return 3
		fi
	else
		if [ -a "$1" ]; then
			echo "Unable to write to ${1} (File is not a directory)"
			return 2
		else
			echo "Unable to write to ${1} (File does not exist)"
			return 1
		fi
	fi
}

installInformix()
{
	canWriteToDir "${INIT_DIR}"
	if [ $? -ne 0 ]; then exit 1; fi
	canWriteToDir "${SBIN_DIR}"
	if [ $? -ne 0 ]; then exit 1; fi
	canWriteToDir "${SYSCONFIG_DIR}"
	if [ $? -ne 0 ]; then exit 1; fi

	installInitScript "informix" "${INFORMIX_INIT}"
	installSysconfigScript "informix" "${INFORMIX_SYSCONFIG}"

	case "${PLATFORM}" in
	'SLES') $DRYRUN || insserv informix;;
	'RHEL') $DRYRUN || chkconfig --add informix;;
	*) echo "Unsupported platform"; exit 1;;
	esac
}

uninstallInformix()
{
	canWriteToDir "${INIT_DIR}"
	if [ $? -ne 0 ]; then exit 1; fi
	canWriteToDir "${SBIN_DIR}"
	if [ $? -ne 0 ]; then exit 1; fi
	canWriteToDir "${SYSCONFIG_DIR}"
	if [ $? -ne 0 ]; then exit 1; fi

	uninstallInitScript "informix"
	uninstallSysconfigScript "informix"
}

installJsonListener()
{
	canWriteToDir "${INIT_DIR}"
	if [ $? -ne 0 ]; then exit 1; fi
	canWriteToDir "${SBIN_DIR}"
	if [ $? -ne 0 ]; then exit 1; fi
	canWriteToDir "${SYSCONFIG_DIR}"
	if [ $? -ne 0 ]; then exit 1; fi

	installInitScript "jsonListener" "${LISTENER_INIT}"
	installSysconfigScript "jsonListener" "${LISTENER_SYSCONFIG}"

	case "${PLATFORM}" in
	'SLES') $DRYRUN || insserv jsonListener;;
	'RHEL') $DRYRUN || chkconfig --add jsonListener;;
	*) echo "Unsupported platform"; exit 1;;
	esac
}

uninstallJsonListener()
{
	canWriteToDir "${INIT_DIR}"
	if [ $? -ne 0 ]; then exit 1; fi
	canWriteToDir "${SBIN_DIR}"
	if [ $? -ne 0 ]; then exit 1; fi
	canWriteToDir "${SYSCONFIG_DIR}"
	if [ $? -ne 0 ]; then exit 1; fi

	uninstallInitScript "jsonListener"
	uninstallSysconfigScript "jsonListener"
}

# Install init script
# $1 -- the base name to be used when copied
# $2 -- the path to the init script to be copied
installInitScript()
{
	DEBUG echo cp "${2}" "${INIT_DIR}/${1}"
	$DRYRUN || cp "${2}" "${INIT_DIR}/${1}"
	DEBUG echo chmod 755 "${INIT_DIR}/${1}"
	$DRYRUN || chmod 755 "${INIT_DIR}/${1}"
	DEBUG echo chown root:root "${INIT_DIR}/${1}"
	$DRYRUN || chown root:root "${INIT_DIR}/${1}"
	if [ "${PLATFORM}" == 'SLES' ]; then
		DEBUG echo ln -s "${INIT_DIR}/${1}" "/sbin/rc${1}"
		$DRYRUN || ln -s "${INIT_DIR}/${1}" "/sbin/rc${1}"
	fi
}

# $1 -- the base name of the init script
uninstallInitScript()
{
	DEBUG echo rm "${INIT_DIR}/${1}"
	$DRYRUN || rm "${INIT_DIR}/${1}"
	if [ "${PLATFORM}" == 'SLES' ]; then
		DEBUG echo rm "/sbin/rc${1}"
		$DRYRUN || rm "/sbin/rc${1}"
	fi
}

# Install sysconfig script
# $1 -- the base name of the sysconfig script
# $1 -- the path to the sysconfig script to be copied
installSysconfigScript()
{
	DEBUG echo cp "${2}" "${SYSCONFIG_DIR}/${1}"
	$DRYRUN || cp "${2}" "${SYSCONFIG_DIR}/${1}"
	DEBUG echo chmod 644 "${SYSCONFIG_DIR}/${1}"
	$DRYRUN || chmod 644 "${SYSCONFIG_DIR}/${1}"
	DEBUG echo chown root:root "${SYSCONFIG_DIR}/${1}"
 	$DRYRUN || chown root:root "${SYSCONFIG_DIR}/${1}"
}

# Uninstall sysconfig script
# $1 -- the base name of the sysconfig script
uninstallSysconfigScript()
{
	DEBUG echo rm "${SYSCONFIG_DIR}/${1}"
	$DRYRUN || rm "${SYSCONFIG_DIR}/${1}"
}

if $INSTALL; then
	case "${PRODUCT}" in
	informix ) installInformix;;
	jsonListener ) installJsonListener;;
	* ) echo "Unsupport product ${PRODUCT}"; exit 1;;
	esac
elif $UNINSTALL; then
	case "${PRODUCT}" in
	informix ) uninstallInformix;;
	jsonListener ) uninstallJsonListener;;
	* ) echo "Unsupport product ${PRODUCT}"; exit 1;;
	esac
else
	echo "Must specify --install or --uninstall";
	usage
	exit 1;
fi

